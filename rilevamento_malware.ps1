# ESEGUIRE QUESTO SCRIPT COME AMMINISTRATORE

# --- Impostazioni per il Logging su File ---
$logDirectory = "C:\Rilevamento Malware"
$Global:LogFileFullPath = Join-Path $logDirectory "log_rilevamenti.txt"

# --- Impostazioni Email (DA CONFIGURARE OBBLIGATORIAMENTE PRIMA DELL'USO) ---
$Global:SMTPServer = "smtp.gmail.com"  # << MODIFICA QUESTO: Sostituisci con il tuo server SMTP
$Global:SMTPPort   = 587                     # << MODIFICA QUESTO: Porta SMTP (comuni: 25, 465 per SSL, 587 per TLS)
$Global:EmailFrom  = "INSERISCI LA MAIL" # << MODIFICA QUESTO: Mittente dell'email
$Global:EmailTo    = "INSERISCI LA MAIL"  # << MODIFICA QUESTO: Destinatario/i (separati da virgola se più di uno)
$Global:EmailSubjectPrefix = "[ALLERTA MALWARE]" # Prefisso per l'oggetto dell'email

# Gestione Credenziali SMTP e SSL
# Se il tuo server SMTP NON richiede credenziali, puoi commentare la riga $Global:Credential = Get-Credential
# e assicurarti che $Global:Credential sia $null.
# Se il tuo server SMTP usa SSL/TLS (comune con porte 465/587), $Global:UseSsl deve essere $true.
# Se usa la porta 25 senza cifratura, imposta $Global:UseSsl = $false.
$Global:UseSsl = $true 
$Global:Credential = $null # Inizializza a null

# Chiedi le credenziali all'avvio dello script se il server SMTP le richiede
# Se il tuo server SMTP non richiede login, commenta o rimuovi le prossime 3 righe
Write-Host "Preparazione per l'invio di email di notifica."
Write-Host "Se il tuo server SMTP richiede autenticazione, ti verranno chieste le credenziali."
$Global:Credential = Get-Credential # Apparirà una finestra per inserire username e password

# --- Fine Impostazioni Email ---

# Crea la directory di log se non esiste
if (-not (Test-Path $logDirectory)) {
    try {
        Write-Host "Tentativo di creare la directory di log: $logDirectory"
        New-Item -Path $logDirectory -ItemType Directory -Force -ErrorAction Stop | Out-Null
        Write-Host "Directory di log creata con successo: $logDirectory"
    } catch {
        Write-Warning "ATTENZIONE: Impossibile creare la directory di log '$logDirectory': $($_.Exception.Message)"
    }
}

# Inizializza il file di log se non esiste
if (Test-Path $logDirectory -PathType Container) {
    if (-not (Test-Path $Global:LogFileFullPath)) {
        try {
            $creationDate = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
            $currentUser = $env:USERNAME
            $computerName = $env:COMPUTERNAME
            $headerLine = "File di log Rilevamento Malware (monitoraggio eventi principali: ID 1116)"
            $headerLine += "`nCreato il: $creationDate (Ora Locale)"
            $headerLine += "`nAvviato da utente: $currentUser"
            $headerLine += "`nSu postazione: $computerName"
            $headerLine += "`n--------------------------------------------------------------------------"
            Set-Content -Path $Global:LogFileFullPath -Value $headerLine -ErrorAction Stop
            Write-Host "File di log inizializzato con intestazione dettagliata: $Global:LogFileFullPath"
        } catch {
            Write-Warning "ATTENZIONE: Impossibile inizializzare il file di log '$Global:LogFileFullPath': $($_.Exception.Message)"
        }
    }
}

# --- Inizio Script Principale ---
Write-Host "Avvio del monitoraggio degli eventi di Windows Defender per rilevamento malware (ID 1116)..."
Write-Host "Questo script rimarrà in esecuzione per monitorare. Premi Ctrl+C per interrompere."
Write-Host "I rilevamenti verranno salvati in: $Global:LogFileFullPath e notificati via email a $($Global:EmailTo)"

function Show-MalwareAlertPopup {
    param(
        [string]$Title = "ALLARME MALWARE RILEVATO!",
        [string]$Message
    )
    Add-Type -AssemblyName System.Windows.Forms -ErrorAction SilentlyContinue
    [System.Windows.Forms.MessageBox]::Show($Message, $Title, [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error) | Out-Null
}

$query = "*[System[EventID=1116]]"

$action = {
    $eventRecord = $event.SourceEventArgs.EventRecord
    $eventTime = $eventRecord.TimeCreated

    Write-Warning "RILEVATO EVENTO ID $($eventRecord.Id) (Malware Detection) alle $($eventTime.ToLocalTime().ToString('yyyy-MM-dd HH:mm:ss')) (Ora Locale)"
    Write-Host "DEBUG [Action]: Inizio elaborazione evento."

    $threatName = "N/D (Proprietà[11] non valida o mancante)"
    $filePath = "N/D (Proprietà[21] non valida o mancante)"
    $triggeringUser = "N/D (Proprietà[19] non valida o mancante)"
    $triggeringProcessName = "N/D (Proprietà[18] non valida o mancante)"
    $specificThreatName = "N/D (Proprietà[7] non valida o mancante)"

    try {
        if ($eventRecord.Properties -and $eventRecord.Properties.Count -ge 22) {
            $threatName = $eventRecord.Properties[11].Value.ToString().Trim()
            $filePath = $eventRecord.Properties[21].Value.ToString().Trim()
            $triggeringUser = $eventRecord.Properties[19].Value.ToString().Trim()
            $triggeringProcessName = $eventRecord.Properties[18].Value.ToString().Trim()
            $specificThreatName = $eventRecord.Properties[7].Value.ToString().Trim()
        } else {
            Write-Warning "DEBUG [Action]: Numero di proprietà dell'evento insufficiente ($($eventRecord.Properties.Count)) per l'estrazione diretta."
        }
    } catch {
        Write-Warning "DEBUG [Action]: Eccezione durante l'estrazione dei dati dalle proprietà dell'evento: $($_.Exception.Message)"
    }

    Write-Host "DEBUG [Action]: Valori estratti - Tipo Minaccia: '$threatName', Nome Minaccia Specifico: '$specificThreatName', Path: '$filePath', Utente: '$triggeringUser', Processo: '$triggeringProcessName'"

    $consoleAlertMessage = "ATTENZIONE! Windows Defender ha rilevato una minaccia!`n`n"
    $consoleAlertMessage += "Ora Rilevamento: $($eventTime.ToLocalTime().ToString('dd/MM/yyyy HH:mm:ss'))`n"
    $consoleAlertMessage += "Tipo Minaccia: $threatName`n"
    $consoleAlertMessage += "Nome Minaccia Specifico: $specificThreatName`n"
    $console_AlertMessage += "File/Percorso Coinvolto: $filePath`n"
    $consoleAlertMessage += "Rilevato da Utente: $triggeringUser`n"
    $consoleAlertMessage += "Processo Scatenante: $triggeringProcessName`n"
    $consoleAlertMessage += "`nControlla le notifiche di Windows Defender per i dettagli e le azioni intraprese."

    Write-Host $consoleAlertMessage -ForegroundColor Red
    # Show-MalwareAlertPopup -Message $consoleAlertMessage # TEMPORANEAMENTE COMMENTATO
    Write-Host "DEBUG [Action]: Popup grafico saltato per questo test."

    $logEntry = "ERRORE NELLA COSTRUZIONE LOG ENTRY"
    try {
        $logEntry = "[{0}] EventID: {1} | Tipo Minaccia: {2} | Nome Specifico: {3} | Percorso: {4} | Utente: {5} | Processo: {6}" -f `
            $eventTime.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss"), `
            $eventRecord.Id, `
            ($threatName | ForEach-Object {$_ -replace ';','-'}), `
            ($specificThreatName | ForEach-Object {$_ -replace ';','-'}), `
            ($filePath | ForEach-Object {$_ -replace ';','-'}), `
            ($triggeringUser | ForEach-Object {$_ -replace ';','-'}), `
            ($triggeringProcessName | ForEach-Object {$_ -replace ';','-'})
    } catch {
        Write-Warning "DEBUG [Action]: Eccezione durante la formattazione di ``$logEntry``: $($_.Exception.Message)"
        $logEntry = "[{0}] EventID: {1} | ERRORE FORMATTAZIONE LOG: $($_.Exception.Message.Replace("`n"," ").Replace("`r"," "))" -f $eventTime.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss"), $eventRecord.Id
    }
    
    Write-Host "DEBUG [Action]: Tentativo di scrivere nel file di log. Percorso: '$($Global:LogFileFullPath)'. Log Entry: '$logEntry'"
    if ($Global:LogFileFullPath -and $logEntry) {
        try {
            Add-Content -Path $Global:LogFileFullPath -Value $logEntry -Encoding UTF8 -ErrorAction Stop
            Write-Host "DEBUG [Action]: Add-Content eseguito con successo."
            Write-Host "Dettagli del rilevamento salvati in: $Global:LogFileFullPath"
        } catch {
            Write-Warning "DEBUG [Action]: Eccezione durante Add-Content."
            Write-Warning "ATTENZIONE: Impossibile scrivere nel file di log '$Global:LogFileFullPath': $($_.Exception.Message)"
            Write-Warning ($_.Exception | Format-List -Force | Out-String)
        }
    } else {
         Write-Warning "DEBUG [Action]: Scrittura su log saltata."
    }

    # --- NUOVA PARTE: Invio Email ---
    Write-Host "DEBUG [Action]: Preparazione invio email di notifica."
    $emailSubject = "$($Global:EmailSubjectPrefix) $specificThreatName rilevato su $($env:COMPUTERNAME)"
    # Il corpo dell'email può essere lo stesso messaggio mostrato in console, o più dettagliato
    $emailBody = "Allerta Malware Rilevato sul computer: $($env:COMPUTERNAME)`n`n"
    $emailBody += "Ora Rilevamento (Locale): $($eventTime.ToLocalTime().ToString('yyyy-MM-dd HH:mm:ss'))`n"
    $emailBody += "Ora Rilevamento (UTC): $($eventTime.ToUniversalTime().ToString('u'))`n" # Utile avere anche UTC
    $emailBody += "Tipo Minaccia: $threatName`n"
    $emailBody += "Nome Minaccia Specifico: $specificThreatName`n"
    $emailBody += "File/Percorso Coinvolto: $filePath`n"
    $emailBody += "Rilevato da Utente: $triggeringUser`n"
    $emailBody += "Processo Scatenante: $triggeringProcessName`n"
    $emailBody += "Computer: $($env:COMPUTERNAME)`n" # Ripetuto per enfasi, potrebbe essere omesso
    $emailBody += "ID Evento Registrato: $($eventRecord.Id)`n`n"
    $emailBody += "Riga di log generata:`n$logEntry`n`n"
    $emailBody += "Si consiglia di verificare il sistema."

    # Parametri per Send-MailMessage
    $mailParams = @{
        From       = $Global:EmailFrom
        To         = $Global:EmailTo.Split(',') # Permette indirizzi multipli separati da virgola
        Subject    = $emailSubject
        Body       = $emailBody
        SmtpServer = $Global:SMTPServer
        Port       = $Global:SMTPPort
    }
    if ($Global:UseSsl) {
        $mailParams.UseSsl = $true # Aggiunge -UseSsl solo se $Global:UseSsl è $true
    }
    if ($Global:Credential) { # Aggiunge -Credential solo se $Global:Credential è stato impostato
        $mailParams.Credential = $Global:Credential
    }

    try {
        Write-Host "DEBUG [Action]: Invio email con parametri: $($mailParams | Out-String)" # Debug
        Send-MailMessage @mailParams -ErrorAction Stop
        Write-Host "DEBUG [Action]: Email di notifica inviata con successo a $($Global:EmailTo)."
    } catch {
        Write-Warning "ATTENZIONE: Impossibile inviare l'email di notifica: $($_.Exception.Message)"
        # Non stampiamo l'intera eccezione qui per non riempire troppo la console, ma potresti farlo per debug approfondito
        # Write-Warning ($_.Exception | Format-List -Force | Out-String) 
    }
    # --- FINE NUOVA PARTE ---
}

# Registra l'abbonamento all'evento
# ... (resto dello script come prima) ...
try {
    $logName = "Microsoft-Windows-Windows Defender/Operational"
    $eventQueryObj = New-Object System.Diagnostics.Eventing.Reader.EventLogQuery($logName, [System.Diagnostics.Eventing.Reader.PathType]::LogName, $query)
    $watcher = New-Object System.Diagnostics.Eventing.Reader.EventLogWatcher($eventQueryObj)
    
    Register-ObjectEvent -InputObject $watcher -EventName "EventRecordWritten" -Action $action -SourceIdentifier "DefenderMalwareDetection" -ErrorAction Stop
    $watcher.Enabled = $true
    Write-Host "Monitoraggio avviato. In attesa di eventi ID 1116..."
} catch {
    Write-Error "Impossibile avviare il monitoraggio. Esegui come Amministratore e assicurati che il log esista."
    Write-Error ($_.Exception | Format-List -Force | Out-String)
    if (-not $Host.UI.RawUI) { Start-Sleep -Seconds 10 }
    exit 1
}

# Mantieni lo script in esecuzione
try {
    while ($true) {
        Wait-Event -SourceIdentifier "DefenderMalwareDetection" -Timeout 60
    }
} catch [System.Management.Automation.ActionPreferenceStopException] {
    Write-Host "Ricevuto Ctrl+C. Interruzione del monitoraggio..."
} catch {
    Write-Error "Errore nel loop principale: $($_.Exception.Message)"
} finally {
    Write-Host "Rimozione del monitoraggio eventi..."
    Unregister-Event -SourceIdentifier "DefenderMalwareDetection" -ErrorAction SilentlyContinue
    if ($watcher) { $watcher.Dispose() }
    Write-Host "Monitoraggio terminato."
}
